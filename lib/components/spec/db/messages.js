// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @server/server
const encoding0 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.name)
    c.string.preencode(state, m.owner)
    c.uint.preencode(state, m.createdAt)
    state.end++ // max flag is 2 so always one byte

    if (m.avatar) c.string.preencode(state, m.avatar)
    if (m.description) c.string.preencode(state, m.description)
  },
  encode (state, m) {
    const flags =
      (m.avatar ? 1 : 0) |
      (m.description ? 2 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.name)
    c.string.encode(state, m.owner)
    c.uint.encode(state, m.createdAt)
    c.uint.encode(state, flags)

    if (m.avatar) c.string.encode(state, m.avatar)
    if (m.description) c.string.encode(state, m.description)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      name: r1,
      owner: r2,
      createdAt: r3,
      avatar: (flags & 1) !== 0 ? c.string.decode(state) : null,
      description: (flags & 2) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @server/channel
const encoding1 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.serverId)
    c.string.preencode(state, m.name)
    c.string.preencode(state, m.type)
    state.end++ // max flag is 2 so always one byte

    if (m.topic) c.string.preencode(state, m.topic)
    c.string.preencode(state, m.createdBy)
    c.uint.preencode(state, m.createdAt)
    if (m.position) c.uint.preencode(state, m.position)
  },
  encode (state, m) {
    const flags =
      (m.topic ? 1 : 0) |
      (m.position ? 2 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.serverId)
    c.string.encode(state, m.name)
    c.string.encode(state, m.type)
    c.uint.encode(state, flags)

    if (m.topic) c.string.encode(state, m.topic)
    c.string.encode(state, m.createdBy)
    c.uint.encode(state, m.createdAt)
    if (m.position) c.uint.encode(state, m.position)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      serverId: r1,
      name: r2,
      type: r3,
      topic: (flags & 1) !== 0 ? c.string.decode(state) : null,
      createdBy: c.string.decode(state),
      createdAt: c.uint.decode(state),
      position: (flags & 2) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @server/message
const encoding2 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.channelId)
    c.string.preencode(state, m.author)
    c.string.preencode(state, m.content)
    c.uint.preencode(state, m.timestamp)
    state.end++ // max flag is 8 so always one byte

    if (m.editedAt) c.uint.preencode(state, m.editedAt)
    if (m.deletedAt) c.uint.preencode(state, m.deletedAt)
    if (m.deletedBy) c.string.preencode(state, m.deletedBy)
    if (m.attachments) c.string.preencode(state, m.attachments)
  },
  encode (state, m) {
    const flags =
      (m.editedAt ? 1 : 0) |
      (m.deletedAt ? 2 : 0) |
      (m.deletedBy ? 4 : 0) |
      (m.attachments ? 8 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.channelId)
    c.string.encode(state, m.author)
    c.string.encode(state, m.content)
    c.uint.encode(state, m.timestamp)
    c.uint.encode(state, flags)

    if (m.editedAt) c.uint.encode(state, m.editedAt)
    if (m.deletedAt) c.uint.encode(state, m.deletedAt)
    if (m.deletedBy) c.string.encode(state, m.deletedBy)
    if (m.attachments) c.string.encode(state, m.attachments)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const r4 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      channelId: r1,
      author: r2,
      content: r3,
      timestamp: r4,
      editedAt: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      deletedAt: (flags & 2) !== 0 ? c.uint.decode(state) : 0,
      deletedBy: (flags & 4) !== 0 ? c.string.decode(state) : null,
      attachments: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @server/user
const encoding3 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.buffer.preencode(state, m.publicKey)
    state.end++ // max flag is 8 so always one byte

    if (m.username) c.string.preencode(state, m.username)
    c.uint.preencode(state, m.joinedAt)
    if (m.inviteCode) c.string.preencode(state, m.inviteCode)
    if (m.avatar) c.string.preencode(state, m.avatar)
    if (m.status) c.string.preencode(state, m.status)
  },
  encode (state, m) {
    const flags =
      (m.username ? 1 : 0) |
      (m.inviteCode ? 2 : 0) |
      (m.avatar ? 4 : 0) |
      (m.status ? 8 : 0)

    c.string.encode(state, m.id)
    c.buffer.encode(state, m.publicKey)
    c.uint.encode(state, flags)

    if (m.username) c.string.encode(state, m.username)
    c.uint.encode(state, m.joinedAt)
    if (m.inviteCode) c.string.encode(state, m.inviteCode)
    if (m.avatar) c.string.encode(state, m.avatar)
    if (m.status) c.string.encode(state, m.status)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.buffer.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      publicKey: r1,
      username: (flags & 1) !== 0 ? c.string.decode(state) : null,
      joinedAt: c.uint.decode(state),
      inviteCode: (flags & 2) !== 0 ? c.string.decode(state) : null,
      avatar: (flags & 4) !== 0 ? c.string.decode(state) : null,
      status: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @server/role
const encoding4 = {
  preencode (state, m) {
    c.string.preencode(state, m.userId)
    c.string.preencode(state, m.serverId)
    c.string.preencode(state, m.role)
    c.uint.preencode(state, m.updatedAt)
    c.string.preencode(state, m.updatedBy)
  },
  encode (state, m) {
    c.string.encode(state, m.userId)
    c.string.encode(state, m.serverId)
    c.string.encode(state, m.role)
    c.uint.encode(state, m.updatedAt)
    c.string.encode(state, m.updatedBy)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.uint.decode(state)
    const r4 = c.string.decode(state)

    return {
      userId: r0,
      serverId: r1,
      role: r2,
      updatedAt: r3,
      updatedBy: r4
    }
  }
}

// @server/invite
const encoding5 = {
  preencode (state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.code)
    c.string.preencode(state, m.serverId)
    c.string.preencode(state, m.createdBy)
    c.uint.preencode(state, m.createdAt)
    state.end++ // max flag is 4 so always one byte

    if (m.expiresAt) c.uint.preencode(state, m.expiresAt)
    if (m.uses) c.uint.preencode(state, m.uses)
    if (m.maxUses) c.uint.preencode(state, m.maxUses)
  },
  encode (state, m) {
    const flags =
      (m.expiresAt ? 1 : 0) |
      (m.uses ? 2 : 0) |
      (m.maxUses ? 4 : 0)

    c.string.encode(state, m.id)
    c.string.encode(state, m.code)
    c.string.encode(state, m.serverId)
    c.string.encode(state, m.createdBy)
    c.uint.encode(state, m.createdAt)
    c.uint.encode(state, flags)

    if (m.expiresAt) c.uint.encode(state, m.expiresAt)
    if (m.uses) c.uint.encode(state, m.uses)
    if (m.maxUses) c.uint.encode(state, m.maxUses)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const r4 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      code: r1,
      serverId: r2,
      createdBy: r3,
      createdAt: r4,
      expiresAt: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      uses: (flags & 2) !== 0 ? c.uint.decode(state) : 0,
      maxUses: (flags & 4) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @server/server/hyperdb#0
const encoding6 = {
  preencode (state, m) {
    c.string.preencode(state, m.name)
    c.string.preencode(state, m.owner)
    c.uint.preencode(state, m.createdAt)
    state.end++ // max flag is 2 so always one byte

    if (m.avatar) c.string.preencode(state, m.avatar)
    if (m.description) c.string.preencode(state, m.description)
  },
  encode (state, m) {
    const flags =
      (m.avatar ? 1 : 0) |
      (m.description ? 2 : 0)

    c.string.encode(state, m.name)
    c.string.encode(state, m.owner)
    c.uint.encode(state, m.createdAt)
    c.uint.encode(state, flags)

    if (m.avatar) c.string.encode(state, m.avatar)
    if (m.description) c.string.encode(state, m.description)
  },
  decode (state) {
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: null,
      name: r1,
      owner: r2,
      createdAt: r3,
      avatar: (flags & 1) !== 0 ? c.string.decode(state) : null,
      description: (flags & 2) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @server/channel/hyperdb#1
const encoding7 = {
  preencode (state, m) {
    c.string.preencode(state, m.serverId)
    c.string.preencode(state, m.name)
    c.string.preencode(state, m.type)
    state.end++ // max flag is 2 so always one byte

    if (m.topic) c.string.preencode(state, m.topic)
    c.string.preencode(state, m.createdBy)
    c.uint.preencode(state, m.createdAt)
    if (m.position) c.uint.preencode(state, m.position)
  },
  encode (state, m) {
    const flags =
      (m.topic ? 1 : 0) |
      (m.position ? 2 : 0)

    c.string.encode(state, m.serverId)
    c.string.encode(state, m.name)
    c.string.encode(state, m.type)
    c.uint.encode(state, flags)

    if (m.topic) c.string.encode(state, m.topic)
    c.string.encode(state, m.createdBy)
    c.uint.encode(state, m.createdAt)
    if (m.position) c.uint.encode(state, m.position)
  },
  decode (state) {
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: null,
      serverId: r1,
      name: r2,
      type: r3,
      topic: (flags & 1) !== 0 ? c.string.decode(state) : null,
      createdBy: c.string.decode(state),
      createdAt: c.uint.decode(state),
      position: (flags & 2) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @server/message/hyperdb#2
const encoding8 = {
  preencode (state, m) {
    c.string.preencode(state, m.channelId)
    c.string.preencode(state, m.author)
    c.string.preencode(state, m.content)
    c.uint.preencode(state, m.timestamp)
    state.end++ // max flag is 8 so always one byte

    if (m.editedAt) c.uint.preencode(state, m.editedAt)
    if (m.deletedAt) c.uint.preencode(state, m.deletedAt)
    if (m.deletedBy) c.string.preencode(state, m.deletedBy)
    if (m.attachments) c.string.preencode(state, m.attachments)
  },
  encode (state, m) {
    const flags =
      (m.editedAt ? 1 : 0) |
      (m.deletedAt ? 2 : 0) |
      (m.deletedBy ? 4 : 0) |
      (m.attachments ? 8 : 0)

    c.string.encode(state, m.channelId)
    c.string.encode(state, m.author)
    c.string.encode(state, m.content)
    c.uint.encode(state, m.timestamp)
    c.uint.encode(state, flags)

    if (m.editedAt) c.uint.encode(state, m.editedAt)
    if (m.deletedAt) c.uint.encode(state, m.deletedAt)
    if (m.deletedBy) c.string.encode(state, m.deletedBy)
    if (m.attachments) c.string.encode(state, m.attachments)
  },
  decode (state) {
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const r4 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: null,
      channelId: r1,
      author: r2,
      content: r3,
      timestamp: r4,
      editedAt: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      deletedAt: (flags & 2) !== 0 ? c.uint.decode(state) : 0,
      deletedBy: (flags & 4) !== 0 ? c.string.decode(state) : null,
      attachments: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @server/user/hyperdb#3
const encoding9 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.publicKey)
    state.end++ // max flag is 8 so always one byte

    if (m.username) c.string.preencode(state, m.username)
    c.uint.preencode(state, m.joinedAt)
    if (m.inviteCode) c.string.preencode(state, m.inviteCode)
    if (m.avatar) c.string.preencode(state, m.avatar)
    if (m.status) c.string.preencode(state, m.status)
  },
  encode (state, m) {
    const flags =
      (m.username ? 1 : 0) |
      (m.inviteCode ? 2 : 0) |
      (m.avatar ? 4 : 0) |
      (m.status ? 8 : 0)

    c.buffer.encode(state, m.publicKey)
    c.uint.encode(state, flags)

    if (m.username) c.string.encode(state, m.username)
    c.uint.encode(state, m.joinedAt)
    if (m.inviteCode) c.string.encode(state, m.inviteCode)
    if (m.avatar) c.string.encode(state, m.avatar)
    if (m.status) c.string.encode(state, m.status)
  },
  decode (state) {
    const r1 = c.buffer.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: null,
      publicKey: r1,
      username: (flags & 1) !== 0 ? c.string.decode(state) : null,
      joinedAt: c.uint.decode(state),
      inviteCode: (flags & 2) !== 0 ? c.string.decode(state) : null,
      avatar: (flags & 4) !== 0 ? c.string.decode(state) : null,
      status: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @server/role/hyperdb#4
const encoding10 = {
  preencode (state, m) {
    c.string.preencode(state, m.role)
    c.uint.preencode(state, m.updatedAt)
    c.string.preencode(state, m.updatedBy)
  },
  encode (state, m) {
    c.string.encode(state, m.role)
    c.uint.encode(state, m.updatedAt)
    c.string.encode(state, m.updatedBy)
  },
  decode (state) {
    const r2 = c.string.decode(state)
    const r3 = c.uint.decode(state)
    const r4 = c.string.decode(state)

    return {
      userId: null,
      serverId: null,
      role: r2,
      updatedAt: r3,
      updatedBy: r4
    }
  }
}

// @server/invite/hyperdb#5
const encoding11 = {
  preencode (state, m) {
    c.string.preencode(state, m.code)
    c.string.preencode(state, m.serverId)
    c.string.preencode(state, m.createdBy)
    c.uint.preencode(state, m.createdAt)
    state.end++ // max flag is 4 so always one byte

    if (m.expiresAt) c.uint.preencode(state, m.expiresAt)
    if (m.uses) c.uint.preencode(state, m.uses)
    if (m.maxUses) c.uint.preencode(state, m.maxUses)
  },
  encode (state, m) {
    const flags =
      (m.expiresAt ? 1 : 0) |
      (m.uses ? 2 : 0) |
      (m.maxUses ? 4 : 0)

    c.string.encode(state, m.code)
    c.string.encode(state, m.serverId)
    c.string.encode(state, m.createdBy)
    c.uint.encode(state, m.createdAt)
    c.uint.encode(state, flags)

    if (m.expiresAt) c.uint.encode(state, m.expiresAt)
    if (m.uses) c.uint.encode(state, m.uses)
    if (m.maxUses) c.uint.encode(state, m.maxUses)
  },
  decode (state) {
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const r4 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: null,
      code: r1,
      serverId: r2,
      createdBy: r3,
      createdAt: r4,
      expiresAt: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      uses: (flags & 2) !== 0 ? c.uint.decode(state) : 0,
      maxUses: (flags & 4) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@server/server': return encoding0
    case '@server/channel': return encoding1
    case '@server/message': return encoding2
    case '@server/user': return encoding3
    case '@server/role': return encoding4
    case '@server/invite': return encoding5
    case '@server/server/hyperdb#0': return encoding6
    case '@server/channel/hyperdb#1': return encoding7
    case '@server/message/hyperdb#2': return encoding8
    case '@server/user/hyperdb#3': return encoding9
    case '@server/role/hyperdb#4': return encoding10
    case '@server/invite/hyperdb#5': return encoding11
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
